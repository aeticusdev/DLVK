#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) readonly buffer GradOutputBuffer {
    float grad_output[];
};

layout(binding = 1) writeonly buffer GradInputBuffer {
    float grad_input[];
};

layout(push_constant) uniform PushConstants {
    uint batch_size;
    uint channels;
    uint input_height;
    uint input_width;
    uint output_height;
    uint output_width;
    uint pool_height;
    uint pool_width;
    uint stride_h;
    uint stride_w;
    uint padding_h;
    uint padding_w;
} pc;

void main() {
    uint input_x = gl_GlobalInvocationID.x;
    uint input_y = gl_GlobalInvocationID.y;
    uint batch_ch = gl_GlobalInvocationID.z;
    
    if (input_x >= pc.input_width || input_y >= pc.input_height || 
        batch_ch >= pc.batch_size * pc.channels) {
        return;
    }
    
    uint batch_idx = batch_ch / pc.channels;
    uint ch_idx = batch_ch % pc.channels;
    
    float grad_sum = 0.0;
    
    // Check all output positions that could have used this input position
    for (uint out_y = 0; out_y < pc.output_height; out_y++) {
        for (uint out_x = 0; out_x < pc.output_width; out_x++) {
            // Check if this input position contributes to this output position
            uint pool_count = 0;
            bool contributes = false;
            
            for (uint py = 0; py < pc.pool_height; py++) {
                for (uint px = 0; px < pc.pool_width; px++) {
                    int check_y = int(out_y * pc.stride_h + py) - int(pc.padding_h);
                    int check_x = int(out_x * pc.stride_w + px) - int(pc.padding_w);
                    
                    if (check_y >= 0 && check_y < int(pc.input_height) && 
                        check_x >= 0 && check_x < int(pc.input_width)) {
                        pool_count++;
                        
                        if (uint(check_y) == input_y && uint(check_x) == input_x) {
                            contributes = true;
                        }
                    }
                }
            }
            
            if (contributes && pool_count > 0) {
                uint output_idx = batch_idx * (pc.channels * pc.output_height * pc.output_width) +
                                 ch_idx * (pc.output_height * pc.output_width) +
                                 out_y * pc.output_width + out_x;
                
                grad_sum += grad_output[output_idx] / float(pool_count);
            }
        }
    }
    
    uint input_idx = batch_idx * (pc.channels * pc.input_height * pc.input_width) +
                    ch_idx * (pc.input_height * pc.input_width) +
                    input_y * pc.input_width + input_x;
    
    grad_input[input_idx] = grad_sum;
}

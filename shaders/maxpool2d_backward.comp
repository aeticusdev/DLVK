#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) readonly buffer GradOutputBuffer {
    float grad_output[];
};

layout(binding = 1) readonly buffer IndexBuffer {
    uint max_indices[];
};

layout(binding = 2) writeonly buffer GradInputBuffer {
    float grad_input[];
};

layout(push_constant) uniform PushConstants {
    uint batch_size;
    uint channels;
    uint input_height;
    uint input_width;
    uint output_height;
    uint output_width;
    uint total_input_size;
} pc;

void main() {
    uint input_x = gl_GlobalInvocationID.x;
    uint input_y = gl_GlobalInvocationID.y;
    uint batch_ch = gl_GlobalInvocationID.z;
    
    if (input_x >= pc.input_width || input_y >= pc.input_height || 
        batch_ch >= pc.batch_size * pc.channels) {
        return;
    }
    
    uint batch_idx = batch_ch / pc.channels;
    uint ch_idx = batch_ch % pc.channels;
    
    uint input_idx = batch_idx * (pc.channels * pc.input_height * pc.input_width) +
                    ch_idx * (pc.input_height * pc.input_width) +
                    input_y * pc.input_width + input_x;
    
    float grad_sum = 0.0;
    
    // Check all output positions to see if this input position was the max
    for (uint out_y = 0; out_y < pc.output_height; out_y++) {
        for (uint out_x = 0; out_x < pc.output_width; out_x++) {
            uint output_idx = batch_idx * (pc.channels * pc.output_height * pc.output_width) +
                             ch_idx * (pc.output_height * pc.output_width) +
                             out_y * pc.output_width + out_x;
            
            // If this input position was the max for this output position
            if (max_indices[output_idx] == input_idx) {
                grad_sum += grad_output[output_idx];
            }
        }
    }
    
    grad_input[input_idx] = grad_sum;
}

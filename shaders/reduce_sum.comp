#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) readonly buffer InputBuffer {
    float data_in[];
};

layout(set = 0, binding = 1) writeonly buffer OutputBuffer {
    float data_out[];
};

layout(push_constant) uniform PushConstants {
    uint input_size;
    uint output_size;
    uint reduction_size;  // Size of each reduction dimension
} pc;


shared float shared_data[256];

void main() {
    uint tid = gl_LocalInvocationID.x;
    uint gid = gl_GlobalInvocationID.x;
    uint wid = gl_WorkGroupID.x;
    

    shared_data[tid] = 0.0;
    

    if (gid < pc.input_size) {
        shared_data[tid] = data_in[gid];
    }
    
    barrier();
    

    for (uint stride = gl_WorkGroupSize.x / 2; stride > 0; stride >>= 1) {
        if (tid < stride && (gid + stride) < pc.input_size) {
            shared_data[tid] += shared_data[tid + stride];
        }
        barrier();
    }
    

    if (tid == 0 && wid < pc.output_size) {
        data_out[wid] = shared_data[0];
    }
}

#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer PredictionsBuffer {
    float predictions[];
};

layout(std430, binding = 1) readonly buffer TargetsBuffer {
    float targets[];
};

layout(std430, binding = 2) writeonly buffer OutputBuffer {
    float result[];
};

layout(push_constant) uniform PushConstants {
    uint size;
    uint batch_size;
} push_constants;

shared float partial_sums[256];

void main() {
    uint tid = gl_LocalInvocationID.x;
    uint gid = gl_GlobalInvocationID.x;
    
    // Initialize shared memory
    partial_sums[tid] = 0.0;
    
    // Each thread processes multiple elements if needed
    uint elements_per_thread = (push_constants.size + gl_WorkGroupSize.x - 1) / gl_WorkGroupSize.x;
    
    for (uint i = 0; i < elements_per_thread; ++i) {
        uint idx = gid + i * gl_WorkGroupSize.x * gl_NumWorkGroups.x;
        if (idx < push_constants.size) {
            float diff = predictions[idx] - targets[idx];
            partial_sums[tid] += diff * diff;
        }
    }
    
    barrier();
    
    // Reduction within workgroup
    for (uint stride = gl_WorkGroupSize.x / 2; stride > 0; stride >>= 1) {
        if (tid < stride) {
            partial_sums[tid] += partial_sums[tid + stride];
        }
        barrier();
    }
    
    // Write result from first thread of first workgroup
    if (gl_WorkGroupID.x == 0 && tid == 0) {
        // Collect all workgroup results and compute mean
        float total_sum = 0.0;
        for (uint wg = 0; wg < gl_NumWorkGroups.x; ++wg) {
            if (wg == 0) {
                total_sum += partial_sums[0];
            }
            // Note: This is simplified - in practice we'd need a two-pass reduction
            // or use atomic operations for multiple workgroups
        }
        result[0] = total_sum / float(push_constants.size);
    }
    
    // Store partial results for multiple workgroups
    if (tid == 0 && gl_WorkGroupID.x > 0) {
        result[gl_WorkGroupID.x] = partial_sums[0];
    }
}

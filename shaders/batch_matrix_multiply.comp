#version 450



layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0) buffer InputA {
    float data_a[];
};

layout(binding = 1) buffer InputB {
    float data_b[];
};

layout(binding = 2) buffer OutputC {
    float data_c[];
};

layout(push_constant) uniform PushConstants {
    uint batch_size;    // Number of batches
    uint M;            // Rows in A and C
    uint N;            // Cols in B and C  
    uint K;            // Cols in A, Rows in B
    uint stride_a;     // Stride for A matrices (M * K)
    uint stride_b;     // Stride for B matrices (K * N)
    uint stride_c;     // Stride for C matrices (M * N)
} pc;


shared float tile_a[16][16];
shared float tile_b[16][16];

void main() {
    uint batch_idx = gl_GlobalInvocationID.z;
    uint row = gl_GlobalInvocationID.y;
    uint col = gl_GlobalInvocationID.x;
    
    uint local_row = gl_LocalInvocationID.y;
    uint local_col = gl_LocalInvocationID.x;
    

    if (batch_idx >= pc.batch_size || row >= pc.M || col >= pc.N) {
        return;
    }
    

    uint offset_a = batch_idx * pc.stride_a;
    uint offset_b = batch_idx * pc.stride_b;
    uint offset_c = batch_idx * pc.stride_c;
    
    float sum = 0.0;
    

    for (uint tile_k = 0; tile_k < pc.K; tile_k += 16) {

        if (row < pc.M && (tile_k + local_col) < pc.K) {
            uint a_idx = offset_a + row * pc.K + (tile_k + local_col);
            tile_a[local_row][local_col] = data_a[a_idx];
        } else {
            tile_a[local_row][local_col] = 0.0;
        }
        

        if ((tile_k + local_row) < pc.K && col < pc.N) {
            uint b_idx = offset_b + (tile_k + local_row) * pc.N + col;
            tile_b[local_row][local_col] = data_b[b_idx];
        } else {
            tile_b[local_row][local_col] = 0.0;
        }
        
        barrier();
        

        for (uint k = 0; k < 16 && (tile_k + k) < pc.K; ++k) {
            sum += tile_a[local_row][k] * tile_b[k][local_col];
        }
        
        barrier();
    }
    

    if (row < pc.M && col < pc.N) {
        uint c_idx = offset_c + row * pc.N + col;
        data_c[c_idx] = sum;
    }
}

#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) readonly buffer GradOutputBuffer {
    float grad_output[];
};

layout(binding = 1) readonly buffer InputBuffer {
    float input_data[];
};

layout(binding = 2) writeonly buffer GradWeightBuffer {
    float grad_weight[];
};

layout(binding = 3) writeonly buffer GradBiasBuffer {
    float grad_bias[];
};

layout(push_constant) uniform PushConstants {
    uint batch_size;
    uint in_channels;
    uint out_channels;
    uint input_height;
    uint input_width;
    uint output_height;
    uint output_width;
    uint kernel_height;
    uint kernel_width;
    uint stride_h;
    uint stride_w;
    uint padding_h;
    uint padding_w;
} pc;

void main() {
    uint kx = gl_GlobalInvocationID.x;
    uint ky = gl_GlobalInvocationID.y;
    uint out_ch = gl_GlobalInvocationID.z;
    
    if (kx >= pc.kernel_width || ky >= pc.kernel_height || out_ch >= pc.out_channels) {
        return;
    }
    
    // Compute gradient w.r.t. weights for all input channels
    for (uint in_ch = 0; in_ch < pc.in_channels; in_ch++) {
        float grad_sum = 0.0;
        
        // Sum over all batch samples and output positions
        for (uint batch = 0; batch < pc.batch_size; batch++) {
            for (uint out_y = 0; out_y < pc.output_height; out_y++) {
                for (uint out_x = 0; out_x < pc.output_width; out_x++) {
                    // Calculate corresponding input position
                    int input_y = int(out_y * pc.stride_h + ky) - int(pc.padding_h);
                    int input_x = int(out_x * pc.stride_w + kx) - int(pc.padding_w);
                    
                    // Check bounds
                    if (input_y >= 0 && input_y < int(pc.input_height) && 
                        input_x >= 0 && input_x < int(pc.input_width)) {
                        
                        uint grad_output_idx = batch * (pc.out_channels * pc.output_height * pc.output_width) +
                                              out_ch * (pc.output_height * pc.output_width) +
                                              out_y * pc.output_width + out_x;
                        
                        uint input_idx = batch * (pc.in_channels * pc.input_height * pc.input_width) +
                                        in_ch * (pc.input_height * pc.input_width) +
                                        uint(input_y) * pc.input_width + uint(input_x);
                        
                        grad_sum += grad_output[grad_output_idx] * input_data[input_idx];
                    }
                }
            }
        }
        
        // Store gradient w.r.t. weight
        uint weight_idx = out_ch * (pc.in_channels * pc.kernel_height * pc.kernel_width) +
                         in_ch * (pc.kernel_height * pc.kernel_width) +
                         ky * pc.kernel_width + kx;
        
        grad_weight[weight_idx] = grad_sum;
    }
    
    // Compute gradient w.r.t. bias (only for the first thread of each output channel)
    if (kx == 0 && ky == 0) {
        float bias_grad = 0.0;
        
        for (uint batch = 0; batch < pc.batch_size; batch++) {
            for (uint out_y = 0; out_y < pc.output_height; out_y++) {
                for (uint out_x = 0; out_x < pc.output_width; out_x++) {
                    uint grad_output_idx = batch * (pc.out_channels * pc.output_height * pc.output_width) +
                                          out_ch * (pc.output_height * pc.output_width) +
                                          out_y * pc.output_width + out_x;
                    
                    bias_grad += grad_output[grad_output_idx];
                }
            }
        }
        
        grad_bias[out_ch] = bias_grad;
    }
}

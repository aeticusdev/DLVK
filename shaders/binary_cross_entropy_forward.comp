#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer PredictionsBuffer {
    float predictions[];
};

layout(std430, binding = 1) readonly buffer TargetsBuffer {
    float targets[];
};

layout(std430, binding = 2) writeonly buffer OutputBuffer {
    float result[];
};

layout(push_constant) uniform PushConstants {
    uint size;
    float epsilon;  // For numerical stability
} push_constants;

shared float partial_sums[256];

void main() {
    uint tid = gl_LocalInvocationID.x;
    uint gid = gl_GlobalInvocationID.x;
    

    partial_sums[tid] = 0.0;
    

    uint start_idx = gid * 4;
    
    if (start_idx < push_constants.size) {

        for (uint i = 0; i < 4 && (start_idx + i) < push_constants.size; ++i) {
            uint idx = start_idx + i;
            

            float pred = predictions[idx];
            float target = targets[idx];
            

            pred = max(push_constants.epsilon, min(1.0 - push_constants.epsilon, pred));
            


            float log_pred = log(pred);
            float log_one_minus_pred = log(1.0 - pred);
            
            float loss = -(target * log_pred + (1.0 - target) * log_one_minus_pred);
            partial_sums[tid] += loss;
        }
    }
    
    barrier();
    

    for (uint stride = gl_WorkGroupSize.x / 2; stride > 0; stride >>= 1) {
        if (tid < stride) {
            partial_sums[tid] += partial_sums[tid + stride];
        }
        barrier();
    }
    

    if (gl_WorkGroupID.x == 0 && tid == 0) {

        result[0] = partial_sums[0] / float(push_constants.size);
    }
    

    if (tid == 0 && gl_WorkGroupID.x > 0) {
        result[gl_WorkGroupID.x] = partial_sums[0];
    }
}
